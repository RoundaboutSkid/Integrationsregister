# OpenAPI skeleton for Integrationsregister Authoring API
openapi: 3.0.3
info:
  title: Integrationsregister Authoring API
  version: 0.1.0
  description: REST API for Applications, Integrations, Solutions, Orders, and vocabularies.
servers:
  - url: http://localhost:4000
    description: Dev (local Docker)
  - url: https://test-api.example.com
    description: Test (placeholder)
  - url: https://api.example.com
    description: Prod (placeholder)
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Expects an Entra ID (Azure AD) issued JWT Access Token.
        - Validate `iss` (tenant issuer), `aud` (this API's Application ID URI / client ID), signature via JWKS.
        - Authorize using `roles` (app roles) or `groups` claims mapped to Viewer/Editor/Admin.
  schemas:
    Error:
      type: object
      description: RFC7807-compatible error payload
      required: [title, status]
      properties:
        type:
          type: string
          format: uri
          example: about:blank
        title:
          type: string
          example: Validation Failed
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: lifecycleStatus must be one of [Planerad, I drift, Avvecklad]
        instance:
          type: string
          example: /integrations/INT00001
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Field-level validation errors keyed by field name
    PageMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        size:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
    LifecycleStatus:
      type: string
      enum: [Planerad, I drift, Avvecklad]
    IntegrationPattern:
      type: string
      enum:
        - Asynkront flöde
        - Synkront flöde HL7v2
        - Synkront flöde HTTP (proxy)
        - Synkront flöde RIV-TA
        - Asynkront flöde med bearbetning
        - Synkront flöde HL7v2 med bearbetning
        - Synkront flöde HL7v2 till HTTP
        - Synkront flöde HTTP med bearbetning
        - Synkront flöde HTTP till HL7v2
        - Synkront flöde HTTP till RIV-TA
        - Synkront flöde RIV-TA med bearbetning
        - Synkront flöde RIV-TA till HTTP
        - Asynkront flöde (generiskt)
        - Synkront flöde (generiskt)
    Application:
      type: object
      required: [id, name, lifecycleStatus]
      properties:
        id:
          type: string
          description: ApplikationID
        name:
          type: string
          description: Benämning
          minLength: 1
        owningOrg:
          type: string
          description: Ägande organisation
          nullable: true
        comment:
          type: string
          nullable: true
        lifecycleStatus:
          $ref: '#/components/schemas/LifecycleStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Integration:
      type: object
      required: [id, name, lifecycleStatus, sourceId, targetId]
      properties:
        id:
          type: string
          description: IntegrationID
        name:
          type: string
          description: Benämning
        pattern:
          $ref: '#/components/schemas/IntegrationPattern'
          nullable: true
        lifecycleStatus:
          $ref: '#/components/schemas/LifecycleStatus'
        linkDiagram:
          type: string
          description: Länk till Diagram (free text or URL)
          nullable: true
        realization:
          $ref: '#/components/schemas/RealizationProperties'
        sourceId:
          type: string
          description: App1 ID (Application.id)
        targetId:
          type: string
          description: App2 ID (Application.id)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    IntegrationSolution:
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          description: IntegrationslösningID
        name:
          type: string
          description: Benämning
        docLink:
          type: string
          description: Länk till dokumentation (free text or URL)
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    IntegrationOrder:
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          description: BeställningID
        oldId:
          type: string
          nullable: true
        date:
          type: string
          format: date
          description: Converted from Excel serial
          nullable: true
        name:
          type: string
          description: Benämning
        description:
          type: string
          nullable: true
        caseLink:
          type: string
          description: Länk ärendehantering
          nullable: true
        designLink:
          type: string
          description: Länk Integrationsdesign
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    RealizationProperties:
      type: object
      description: Constrained realization properties with numeric values
      properties:
        AMK:
          type: number
          description: AMK capability score/value
          example: 1
        Mule:
          type: number
          description: Mule capability score/value
          example: 2
        SKLTP:
          type: number
          description: SKLTP capability score/value
          example: 0
      additionalProperties: false
    Role:
      type: string
      enum: [Viewer, Editor, Admin]
    AuthMe:
      type: object
      properties:
        userId:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        name:
          type: string
          example: Ada Lovelace
        email:
          type: string
          example: ada@example.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        groups:
          type: array
          items:
            type: string
          description: Entra group Object IDs from token (if present)
    AuditEvent:
      type: object
      properties:
        id:
          type: string
          example: 2025-09-01T12:00:00.000Z::user@org::PUT::Integration::INT00001
        timestamp:
          type: string
          format: date-time
        userId:
          type: string
        user:
          type: string
          description: Display name or UPN
        action:
          type: string
          example: PUT
        entityType:
          type: string
          enum: [Application, Integration, IntegrationSolution, IntegrationOrder]
        entityId:
          type: string
        before:
          type: object
          nullable: true
        after:
          type: object
          nullable: true
        diff:
          type: object
          description: JSON Patch-like summary
    PagedApplications:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        meta:
          $ref: '#/components/schemas/PageMeta'
    PagedIntegrations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Integration'
        meta:
          $ref: '#/components/schemas/PageMeta'
    PagedSolutions:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationSolution'
        meta:
          $ref: '#/components/schemas/PageMeta'
    PagedOrders:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationOrder'
        meta:
          $ref: '#/components/schemas/PageMeta'
paths:
  /auth/me:
    get:
      summary: Current user and roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthMe'
  /vocabularies/lifecycle-status:
    get:
      summary: List lifecycle statuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LifecycleStatus'
              examples:
                default:
                  value: ["Planerad","I drift","Avvecklad"]
  /vocabularies/integration-patterns:
    get:
      summary: List integration patterns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationPattern'
              examples:
                default:
                  value:
                    - Asynkront flöde
                    - Synkront flöde HL7v2
                    - Synkront flöde HTTP (proxy)
  /applications:
    get:
      summary: List applications
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/LifecycleStatus' }
        - in: query
          name: org
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedApplications'
          headers:
            X-Total-Count:
              description: Total number of items for pagination
              schema: { type: integer }
    post:
      summary: Create application
      description: Requires role Editor or Admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /applications/{id}:
    get:
      summary: Get application
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Application' } } } }
        '404': { description: Not Found }
    put:
      summary: Update application
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Application' } } } }
        '400': { description: Bad Request }
        '404': { description: Not Found }
    delete:
      summary: Delete (soft)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
  /applications/{id}/integrations:
    get:
      summary: List integrations related to application
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: direction
          schema: { type: string, enum: [inbound, outbound, all] }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedIntegrations' } } } }
  /integrations:
    get:
      summary: List integrations
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: sourceId
          schema: { type: string }
        - in: query
          name: targetId
          schema: { type: string }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/LifecycleStatus' }
        - in: query
          name: pattern
          schema: { $ref: '#/components/schemas/IntegrationPattern' }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedIntegrations' } } } }
    post:
      summary: Create integration
      description: Requires role Editor or Admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Integration'
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Integration' } } } }
        '400': { description: Bad Request }
  /integrations/{id}:
    get:
      summary: Get integration
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Integration' } } } }
        '404': { description: Not Found }
    put:
      summary: Update integration
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Integration'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Integration' } } } }
        '400': { description: Bad Request }
        '404': { description: Not Found }
    delete:
      summary: Delete (soft)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
  /integrations/{id}/solutions/{solutionId}:
    post:
      summary: Link solution to integration
      description: Requires role Editor or Admin.
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
        - { in: path, name: solutionId, required: true, schema: { type: string } }
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
    delete:
      summary: Unlink solution from integration
      description: Requires role Editor or Admin.
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
        - { in: path, name: solutionId, required: true, schema: { type: string } }
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
  /integrations/{id}/orders/{orderId}:
    post:
      summary: Link order to integration
      description: Requires role Editor or Admin.
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
        - { in: path, name: orderId, required: true, schema: { type: string } }
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
    delete:
      summary: Unlink order from integration
      description: Requires role Editor or Admin.
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
        - { in: path, name: orderId, required: true, schema: { type: string } }
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
  /solutions:
    get:
      summary: List solutions
      parameters:
        - { in: query, name: q, schema: { type: string } }
        - { in: query, name: page, schema: { type: integer, minimum: 1 } }
        - { in: query, name: size, schema: { type: integer, minimum: 1 } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedSolutions' } } } }
    post:
      summary: Create solution
      description: Requires role Editor or Admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationSolution'
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/IntegrationSolution' } } } }
  /solutions/{id}:
    get:
      summary: Get solution
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/IntegrationSolution' } } } }
        '404': { description: Not Found }
    put:
      summary: Update solution
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationSolution'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/IntegrationSolution' } } } }
        '404': { description: Not Found }
    delete:
      summary: Delete solution (soft)
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
      responses:
        '204': { description: No Content }
  /orders:
    get:
      summary: List orders
      parameters:
        - { in: query, name: q, schema: { type: string } }
        - { in: query, name: page, schema: { type: integer, minimum: 1 } }
        - { in: query, name: size, schema: { type: integer, minimum: 1 } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedOrders' } } } }
    post:
      summary: Create order
      description: Requires role Editor or Admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationOrder'
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/IntegrationOrder' } } } }
  /orders/{id}:
    get:
      summary: Get order
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/IntegrationOrder' } } } }
        '404': { description: Not Found }
    put:
      summary: Update order
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationOrder'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/IntegrationOrder' } } } }
        '404': { description: Not Found }
    delete:
      summary: Delete order (soft)
      parameters:
        - { in: path, name: id, required: true, schema: { type: string } }
      responses:
        '204': { description: No Content }
  /admin/audit:
    get:
      summary: Query audit events
      description: Admin only.
      parameters:
        - in: query
          name: entityType
          schema: { type: string, enum: [Application, Integration, IntegrationSolution, IntegrationOrder] }
        - in: query
          name: entityId
          schema: { type: string }
        - in: query
          name: user
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditEvent'
  /admin/audit/{entityType}/{entityId}:
    get:
      summary: Audit events for specific entity
      description: Admin only.
      parameters:
        - in: path
          name: entityType
          required: true
          schema: { type: string, enum: [Application, Integration, IntegrationSolution, IntegrationOrder] }
        - in: path
          name: entityId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditEvent'
